generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attachment {
  id         Int      @id @default(autoincrement())
  slug       String   @unique
  name       String   @default("")
  attachment String   @default("")
  mime       String   @default("")
  size       Int      @default(0)
  url        String   @default("")
  source     String   @default("")
  acl        String   @default("")
  metas      Json?    @default("{}")
  created    DateTime @default(now())
  modified   DateTime @default(now())

  @@map("attachment")
}

model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @default(cuid())
  username  String   @unique
  email     String?  @unique
  firstname String
  lastname  String
  nicename  String
  password  String?
  type      String   @default("User")
  status    String   @default("Active")
  language  String   @default("en")
  metas     Json?    @default("{}")
  created   DateTime @default(now())
  modified  DateTime @default(now())

  messages        Message[]
  chats           Chat[]
  rims            Rim[]
  wallets         Wallet[]
  linkedAccounts  LinkedAccount[]
  blinks          Blink[]
  sessions        Session[]
  AnalysisReport  AnalysisReport[]
  ActionPlan      ActionPlan[]
  AnalysisRequest AnalysisRequest[]

  @@map("user")
}

model Chat {
  id         Int       @id @default(autoincrement())
  uid        String    @unique @default(cuid())
  idUser     Int?      @map("id_user")
  idExternal String?   @unique @map("external_id")
  type       String    @default("telegram")
  title      String? // Opcional, podría ser útil para grupos o chats temáticos
  created    DateTime  @default(now()) @map("created")
  modified   DateTime  @default(now()) @map("modified")
  messages   Message[]

  user User? @relation(fields: [idUser], references: [id])

  @@map("chat")
}

model Message {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @default(cuid())
  content     String   @db.LongText
  role        String   @default("user")
  messageType String   @map("message_type")
  idUser      Int?     @map("id_user")
  idChat      Int      @map("id_chat")
  responseTo  Int?     @map("response_to")
  created     DateTime @default(now()) @map("created")
  modified    DateTime @default(now()) @map("modified")

  parentMessage Message?  @relation("responses", fields: [responseTo], references: [id])
  responses     Message[] @relation("responses")
  user          User?     @relation(fields: [idUser], references: [id])
  chat          Chat      @relation(fields: [idChat], references: [id])

  rims            Rim[]
  variants        Variant[]
  ActionSolved    ActionSolved[]
  AnalysisReport  AnalysisReport[]
  ActionPlan      ActionPlan[]
  AnalysisRequest AnalysisRequest[]

  @@map("message")
}

model ActionSolved {
  id         Int      @id @default(autoincrement())
  idMessage  Int      @map("id_message")
  actionName String   @map("action_name")
  actionArgs Json     @map("action_args")
  order      Int      @default(0)
  created    DateTime @default(now())
  modified   DateTime @updatedAt

  message Message @relation(fields: [idMessage], references: [id])

  @@index([idMessage, order])
  @@map("action_solved")
}

model Variant {
  id        Int      @id @default(autoincrement())
  idMessage Int      @map("id_message")
  type      String
  url       String?
  data      Json?
  mimeType  String?  @map("mime_type")
  size      Int?
  metadata  Json?
  created   DateTime @default(now())
  modified  DateTime @default(now())

  message Message @relation(fields: [idMessage], references: [id])

  @@map("variant")
}

model Rim {
  id               Int       @id @default(autoincrement())
  idMessage        Int       @map("id_message")
  jsonData         Json      @map("json_data")
  version          Float     @default(1)
  idUser           Int?      @map("id_user")
  expired          DateTime?
  interactionCount Int       @default(0)
  type             String?
  status           String    @default("active")
  created          DateTime  @default(now())
  modified         DateTime  @default(now())

  message Message @relation(fields: [idMessage], references: [id])
  user    User?   @relation(fields: [idUser], references: [id])

  @@map("rim")
}

model Wallet {
  id        Int     @id @default(autoincrement())
  idUser    Int     @map("id_user")
  network   String  @default("solana") @map("network") @db.VarChar(255)
  address   String  @db.VarChar(255)
  secretKey String? @map("secret_key") @db.Text
  isMain    Boolean @default(false) @map("is_main")
  metas     Json?   @default("{}")

  created  DateTime @default(now())
  modified DateTime @default(now())

  user User @relation(fields: [idUser], references: [id])

  @@unique([network, address])
  @@map("wallet")
}

model LinkedAccount {
  id         Int    @id @default(autoincrement())
  idUser     Int?   @map("id_user")
  provider   String
  idProvider String @map("id_provider")
  token      String @default("")
  status     String @default("pending")
  metas      Json?  @default("{}")

  created  DateTime @default(now())
  modified DateTime @default(now())

  user User? @relation(fields: [idUser], references: [id])

  @@unique([provider, idProvider])
  @@map("linked_account")
}

model Blink {
  id       Int      @id @default(autoincrement())
  uid      String   @unique @default(cuid())
  idUser   Int      @map("id_user")
  data     Json     @default("{}") @map("data")
  created  DateTime @default(now())
  modified DateTime @default(now())

  user User @relation(fields: [idUser], references: [id])

  @@map("blink")
}

model Session {
  id       Int      @id @default(autoincrement())
  key      String   @unique
  value    Json     @default("{}")
  idUser   Int?     @map("id_user")
  type     String   @default("telegram")
  created  DateTime @default(now())
  modified DateTime @default(now())

  user User? @relation(fields: [idUser], references: [id])

  @@map("session")
}

model Token {
  id                Int       @id @default(autoincrement())
  uid               String    @unique @default(cuid())
  address           String    @unique
  name              String?
  symbol            String?
  decimals          Int?
  logoURI           String?
  tags              String?   @default("[]")
  dailyVolume       Float?    @map("daily_volume")
  freezeAuthority   String?   @map("freeze_authority")
  mintAuthority     String?   @map("mint_authority")
  permanentDelegate String?   @map("permanent_delegate")
  mintedAt          DateTime? @map("minted_at")
  coingeckoId       String?   @map("coingecko_id")
  metas             Json      @default("{}")
  created           DateTime  @default(now())
  modified          DateTime  @updatedAt

  // Relationships
  AnalysisReport   AnalysisReport[]
  ActionPlan       ActionPlan[]
  analysisRequests AnalysisRequest[] @relation("TokensOnAnalysisRequests")

  @@map("tokens")
}

model JupiterOrder {
  id                   Int       @id @default(autoincrement()) @map("id") // Unique identifier for the order
  publicKey            String    @unique @map("public_key") // Public key of the order (Unique)
  maker                String?   @map("maker") // Public key of the order creator (Optional)
  inputMint            String?   @map("input_mint") // Public key of the input token (Optional)
  outputMint           String?   @map("output_mint") // Public key of the output token (Optional)
  originalMakingAmount String?   @map("original_making_amount") // Original amount offered in the order (Optional)
  originalTakingAmount String?   @map("original_taking_amount") // Original amount required in the order (Optional)
  makingAmount         String?   @map("making_amount") // Remaining amount in the order (offered) (Optional)
  takingAmount         String?   @map("taking_amount") // Remaining amount in the order (required) (Optional)
  makerInputAccount    String?   @map("maker_input_account") // Public key of the maker's input account (Optional)
  makerOutputAccount   String?   @map("maker_output_account") // Public key of the maker's output account (Optional)
  reserve              String?   @map("reserve") // Public key of the reserve associated with the order (Optional)
  borrowMakingAmount   String?   @map("borrow_making_amount") // Amount borrowed to make the order, if any (Optional)
  expiredAt            DateTime? @map("expired_at") // Expiration date of the order (can be null)
  base                 String?   @map("base") // Public key of the base token (Optional)
  referral             String?   @map("referral") // Public key of the referral, if any (can be null)
  waiting              Boolean   @map("waiting") // Status of the order (waiting or not)
  created              DateTime  @default(now())
  modified             DateTime  @updatedAt

  @@map("jupiter_order") // Map the model to the jupiter_order table
}

model AnalysisReport {
  id                  Int      @id @default(autoincrement())
  uid                 String   @unique @default(cuid())
  idToken             Int      @map("id_token")
  idUser              Int      @map("id_user")
  idMessage           Int      @map("id_message")
  strategyKey         String   @map("strategy_key")
  strategyName        String   @map("strategy_name")
  strategyDescription String   @map("strategy_description")
  intervalValue       Int      @map("interval_value")
  intervalUnit        String   @map("interval_unit")
  startDate           DateTime @map("start_date")
  endDate             DateTime @map("end_date")
  interpretation      String
  created             DateTime @default(now())
  modified            DateTime @default(now())

  // Relationships
  token             Token                     @relation(fields: [idToken], references: [id])
  user              User                      @relation(fields: [idUser], references: [id])
  message           Message                   @relation(fields: [idMessage], references: [id])
  indicators        AnalysisIndicator[]
  predictions       AnalysisPrediction[]
  supportLevels     AnalysisSupportLevel[]
  resistanceLevels  AnalysisResistanceLevel[]
  analysisRequest   AnalysisRequest?          @relation(fields: [analysisRequestId], references: [id])
  analysisRequestId Int?

  @@map("analysis_report")
}

model AnalysisIndicator {
  id               Int      @id @default(autoincrement())
  idAnalysisReport Int      @map("id_analysis_report")
  type             String
  value            Json
  created          DateTime @default(now())
  modified         DateTime @default(now())

  // Relationships
  analysisReport AnalysisReport @relation(fields: [idAnalysisReport], references: [id])

  @@map("analysis_indicator")
}

model AnalysisPrediction {
  id               Int      @id @default(autoincrement())
  idAnalysisReport Int      @map("id_analysis_report")
  timeFrame        String   @map("time_frame")
  predictedPrice   Float    @map("predicted_price")
  created          DateTime @default(now())
  modified         DateTime @default(now())

  // Relationships
  analysisReport AnalysisReport @relation(fields: [idAnalysisReport], references: [id])

  @@map("analysis_prediction")
}

model AnalysisSupportLevel {
  id               Int      @id @default(autoincrement())
  idAnalysisReport Int      @map("id_analysis_report")
  priceLevel       Float    @map("price_level")
  created          DateTime @default(now())
  modified         DateTime @default(now())

  // Relationships
  analysisReport AnalysisReport @relation(fields: [idAnalysisReport], references: [id])

  @@map("analysis_support_level")
}

model AnalysisResistanceLevel {
  id               Int      @id @default(autoincrement())
  idAnalysisReport Int      @map("id_analysis_report")
  priceLevel       Float    @map("price_level")
  created          DateTime @default(now())
  modified         DateTime @default(now())

  // Relationships
  analysisReport AnalysisReport @relation(fields: [idAnalysisReport], references: [id])

  @@map("analysis_resistance_level")
}

model ActionPlan {
  id          Int              @id @default(autoincrement())
  uid         String           @unique @default(cuid())
  idUser      Int              @map("id_user")
  idToken     Int              @map("id_token")
  idMessage   Int              @map("id_message")
  strategyKey String           @map("strategy_key")
  status      ActionPlanStatus @default(active)
  created     DateTime         @default(now())
  modified    DateTime         @default(now())

  // Relationships
  user    User         @relation(fields: [idUser], references: [id])
  token   Token        @relation(fields: [idToken], references: [id])
  message Message      @relation(fields: [idMessage], references: [id])
  steps   ActionStep[]

  @@map("action_plan")
}

model ActionStep {
  id           Int             @id @default(autoincrement())
  idActionPlan Int             @map("id_action_plan")
  order        Int
  description  String
  state        ActionStepState @default(pending)
  actionType   ActionType      @map("action_type")
  parameters   Json            @default("{}")
  created      DateTime        @default(now())
  modified     DateTime        @default(now())

  // Relationships
  actionPlan ActionPlan @relation(fields: [idActionPlan], references: [id])

  @@map("action_step")
}

model AnalysisRequestStrategy {
  id                Int      @id @default(autoincrement())
  idAnalysisRequest Int      @map("id_analysis_request")
  strategyKey       String   @map("strategy_key")
  created           DateTime @default(now())
  modified          DateTime @default(now())

  // Relationships
  analysisRequest AnalysisRequest @relation(fields: [idAnalysisRequest], references: [id])

  @@map("analysis_request_strategy")
}

model AnalysisRequest {
  id        Int           @id @default(autoincrement())
  uid       String        @unique @default(cuid())
  idUser    Int           @map("id_user")
  idMessage Int           @map("id_message")
  status    RequestStatus @default(token_selection)
  created   DateTime      @default(now())
  modified  DateTime      @default(now())

  // Relationships
  user                    User                      @relation(fields: [idUser], references: [id])
  message                 Message                   @relation(fields: [idMessage], references: [id])
  tokens                  Token[]                   @relation("TokensOnAnalysisRequests")
  AnalysisRequestStrategy AnalysisRequestStrategy[]
  AnalysisReport          AnalysisReport[]

  @@map("analysis_request")
}

enum RequestStatus {
  token_selection
  strategy_selection
  analysis_generation
  action_plan_generation
  completed
  failed
}

enum ActionStepState {
  pending
  in_progress
  completed
  failed
}

enum ActionType {
  monitor
  buy
  sell
  hold
}

enum ActionPlanStatus {
  active
  completed
  cancelled
}
